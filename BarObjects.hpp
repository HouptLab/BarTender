#ifndef _BAROBJECTS_#define _BAROBJECTS_#define MISSINGWGT -32000.0class Experiment;class DailyData:public Object {	public:		short numRats;	short numItems;	unsigned long onTime;	unsigned long offTime;	double **onWeight;	double **offWeight;		DailyData(FILE *fp);	DailyData(short nRats,short nItems);		~DailyData();		Boolean GetWeights(short rat, short itemIndex,double *onwgt,double *offwgt,double *deltawgt);	void SaveOn(FILE *fp);	void SaveOff(Experiment *expt,FILE *fp);	void SaveCumulative(Experiment *expt,char *name);	void InitWeights(void);	void SetOnWeight(short rat,short itemIndex,double wgt);	void SetOffWeight(short rat,short itemIndex,double wgt);	void ClearOnWeights(void);	void ClearOffWeights(void);	unsigned long GetUnWeighedOnItems(void);	unsigned long GetUnWeighedOffItems(void);};class RatType:public Object {	public:		RatType(unsigned long num);	unsigned long id;	unsigned long group;	unsigned long start_time;	unsigned long end_time; // 0 = end-time not defined yet};class ItemType:public Object {		public:			char name[256];	// e.g. "Food"	char tag[32];	// e.g. "F"	//double minWgt,maxWgt;		ItemType(unsigned long num);		Boolean CheckTag(char *string);		// given a string, check if our tag is part of the string		// item strings are of the structure ExptTag_RatNum_ItemTag		// return if true};class GroupType:public Object {		public:			char name[256];	// e.g. "Food"	char tag[32];	// e.g. "F"	//double minWgt,maxWgt;		GroupType(unsigned long num);	};class Weight:public Object {	public:		ItemType *item;		double on;	double off;	Boolean got_on,got_off;	// TRUE if not weighed this day..	Weight(ItemType *i);	void SetOn(double o);	void SetOff(double o);	void GetWeights(double *on, double *off, Boolean *got_on,Boolean *got_off);};#define MAXITEMS 6#define MAXGROUPS 10class Experiment:public Object {public:	Experiment();	~Experiment();	short vRefNum;	long folder_dirID;		 // directory ID of the folder containing the raw data		 // either created when the expt is created, 		 // or the folder is searched for when the expt params are loaded		 // folder has the name "tag data Ä"		char name[256]; // eg. "Area Postrema Lesions"	char tag[32];	// "AP"	char comment[256];	unsigned long start_time;	unsigned long end_time; // 0 == end-time not defined yet	Boolean waiting_for_off;		Boolean hasPreference;	unsigned long prefItem,baseItem;	ListObject *rats; 	//	ListObject *items;	// list of ItemTypes  food, water, test	ListObject *groups; // rats can be divided into groups	Boolean useGroups; // flag to indicate if data should be divided						//  into groups for analysis & summary	ListObject *days_of_data;	// list of the daily data objects	DailyData *current_day;		void SetNewExptDefaults(void);			void InitializeOn(void);	void CleanUpOn(void);	void InitializeOff(void);	void CleanUpOff(void);		void SetNumRats(unsigned long numRats);	void SetNumItems(unsigned long numItems);	void SetNumGroups(unsigned long numGroups);	void SetName(char *n);	void SetTag(char *t);	void SetComment(char *c);	void SetStartTime(unsigned long s);	void SetEndTime(unsigned long e);	void SetWaitingForOff(Boolean wait);	void SetCurrentDay(DailyData *cd);		unsigned long  GetNumRats(void);	unsigned long  GetNumItems(void);	unsigned long  GetNumGroups(void);	unsigned long  GetNumDays(void);	ItemType *GetAnItem(unsigned long i);	short GetItemIndex(ItemType *i);	GroupType *GetAGroup(unsigned long i);	short GetGroupIndex(GroupType *i);			void SetSequentialGroups(void);	void SetAlternatingGroups(void);		void GetName(char *n);	void GetTag(char *t);	void GetTagName(char *tn);	void GetComment(char *c);	unsigned long GetStartTime(void);	unsigned long GetEndTime(void);		Boolean WaitingForOff(void);	DailyData *GetCurrentDay(void);	void ClearCurrentDay(void);		DailyData *LoadOnWeights(void);	Boolean AmIWaitingForOff(void);		Boolean GetItemText(short rat,short itemIndex,char *ontext,char *offtext,char *deltatext);	Boolean GetWeights(short rat, ItemType *item,double *onwgt,double *offwgt,double *deltawgt);	void SetOnWeight(short rat, ItemType *item,double weight);	void SetOffWeight(short rat, ItemType *item,double weight);	void SaveOnWeights(void);	void SaveOffWeights(void);	void CreateCumulativeFile(char *name);	void ReplaceCumulFile(void);	void DeleteOnWeightsFile(void);	void AbortOnWeighing(void);	void AbortOffWeighing(void);		unsigned long GetUnWeighedOnItems(void);	unsigned long GetUnWeighedOffItems(void);		ListObject *GetRats(void);	ListObject *GetItems(void);	ListObject *GetDays(void);	ListObject *GetGroups(void);		Boolean Save(void);	Boolean Load(void);		void SaveExptParams(FILE *fp);	void SaveRats(FILE *fp);	void SaveItems(FILE *fp);	void SaveGroups(FILE *fp);	void CreateExptFolder(void);	void FindExptFolder(void);	Boolean SetExptFolderDirectory(void);		void LoadExptParams(FILE *fp);	void LoadRats(FILE *fp);	void LoadItems(FILE *fp);	void LoadGroups(FILE *fp);		short Tag2Rat(char *text);		// - 1 if outside the range of rat numbers	ItemType *Tag2Item(char *text);		//-1 if outside the range of item numbers			void GetPreferenceText(char *text);	Boolean HasPreference(void);	void GetPreference(unsigned long *s,unsigned long *w);	void SetPreference(Boolean hasPref,unsigned long s, unsigned long w);	void GetPrefScore(short rat, double *pref);	void GetPrefScoreText(short rat, char *text);};Boolean EditExperiment(Experiment *expt);Boolean SetPreference(Experiment *expt);Experiment *MatchTag2Expt(char *tag);extern ListObject *allExpts;#endif