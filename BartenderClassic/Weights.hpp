#include "Display.hpp"#include "BarObjects.hpp"class WeightsWindow;class InputViewObject:public ViewObject {		protected:		LabelObject prompt;		LabelObject weight;		LabelObject tag;		LabelObject expt;				public:			InputViewObject();	void  Draw(Rect *updateRect,PaneObject *pane); 			void SetTag(char *text);				void SetWeight(char *text);		void SetExpt(char *text);				WeightsWindow *wgtWindow;	};class ExptViewObject:public ViewObject {		protected:		LabelObject offWeight;		LabelObject onWeight;		LabelObject deltaWeight;		LabelObject subject;		short hiliteRat,hiliteItem;		public:			ExptViewObject();	void  Draw(Rect *updateRect,PaneObject *pane); 	unsigned long Print(TPrint **hPrint,TPPrPort printPort);	void GetRatText(short i,char *rat_text);	void SetRatBoxes(short i);	void SetItemBoxes(short i);	void DrawHeadings(void);	void FixOrigin(short rat);	void HiliteWeight(void);	void SetHiliteWeight(short r,short i);	WeightsWindow *wgtWindow;};class PendingWgt:public Object {public:	Experiment *expt;	unsigned long rat;	ItemType *item;	unsigned long time_spawned;		PendingWgt(Experiment *e,unsigned long r,ItemType *i);};class WeightsWindow: public WindowObject {	protected:		char text_in[256];		Boolean waiting_for_text;		Boolean waiting_for_weight;		Boolean weight_while_typing;		unsigned long text_len;		InputViewObject *input;		double curr_wgt_display;		Experiment *expt;		short  rat;		ItemType *item;		PendingWgt *pending;					public:			ExptViewObject *expt_view;		WeightsWindow(char *name, Point maxSize);	void KeyDown(char keypress, short modifiers);	void SetInputView(InputViewObject *i);	void SetExptView(ExptViewObject *i);	void WaitForWeight(void);	virtual void ProcessWeight(Experiment *e, unsigned long r, ItemType *i);	virtual Boolean ProcessTag(void);	void Clear(void);	void OnceALoop(void);	void SetExpt(Experiment *e);	Experiment *GetExpt(void);	Boolean  Close(void);	Boolean  GoAway(Point globalPt);	Boolean OKToFinish(void);	virtual Boolean  FinishWeighing(void);	virtual Boolean AbortWeighing(void);	virtual unsigned long GetUnWeighedItems(void);	unsigned long Print(void);		};class OnWeightsWindow: public WeightsWindow {public:	OnWeightsWindow(char *name, Point maxSize);	virtual void ProcessWeight(Experiment *e, unsigned long r, ItemType *i);	virtual Boolean ProcessTag(void);	virtual Boolean AbortWeighing(void);	virtual Boolean  FinishWeighing(void);	virtual unsigned long GetUnWeighedItems(void);};class OffWeightsWindow: public WeightsWindow {public:	OffWeightsWindow(char *name, Point maxSize);	virtual void ProcessWeight(Experiment *e, unsigned long r, ItemType *i);	virtual Boolean ProcessTag(void);	virtual Boolean AbortWeighing(void);	virtual Boolean  FinishWeighing(void);	unsigned long GetUnWeighedItems(void);};