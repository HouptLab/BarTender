#include "TransposeTabFile.hpp"#include "TabText.hpp"//to transpose the table...TextTable::TextTable() {	unsigned long c, r;		for (c= 0;c<MAX_COL;c++) {			for (r = 0;r < MAX_ROW;r++) {						cells[r][c] = NULL;					}		}	numColumns = numRows = 0;}	TextTable::~TextTable() {		unsigned long c, r;	for (c= 0;c<MAX_COL;c++) {			for (r = 0;r < MAX_ROW;r++) {						if (cells[r][c] != NULL) {				DisposHandle(cells[r][c]);			}					}		}	numColumns = numRows = 0;}	void TextTable::AddLastRow(void) {	numRows++;	currColumn = 0;}void TextTable::AddCellToLastRow(char *text) {	SetCell(numRows-1,currColumn,text);	currColumn++;		}void TextTable::AddLastColumn(void) {	numColumns++;	currRow = 0;}void TextTable::AddCellToLastColumn(char *text) {	SetCell(currRow,numColumns-1,text);	currRow++;		}void TextTable::SetCell(unsigned long r, unsigned long c, char *text) {	Handle myCell;	char myText[256];	short text_length;	char temp;		if (r >= MAX_ROW || c >= MAX_COL) return;	myCell = cells[r][c];		if (myCell != NULL) { DisposHandle(myCell); myCell = NULL;}		text_length = strlen(text);	if (text_length != 0) {				if (text_length > 255) {					temp = text[255];			text[255] = '\0';			strcpy(myText,text);			text[255] = temp;			text_length = 255;		}		else strcpy(myText,text);		text_length++;		myCell = NewHandle(sizeof (char) * text_length);		strcpy( (*myCell),myText);	}	 cells[r][c] = myCell;	 	if (r >= numRows) numRows = r+1;	if (c >= numColumns) numColumns = c+1;}	void TextTable::GetCell(unsigned long r, unsigned long c, char *text) {	Handle myCell;	myCell = cells[r][c];	if (myCell != NULL) {		strcpy( text,(*myCell));	}	else { text[0] = '\0'; }	}Boolean TextTable::ReadTableFromFile(FILE *fp) {	char text[256];	unsigned long r,c;		LineBuffer *line = NewLineBuffer(4096); 	// assume that the table has been initialized to null values upon entry			r = c = 0;	while (GetNextLine(line,fp)) {				while (GetNextTabField(line,text)) {					if (strlen(text) != 0) {							SetCell(r,c,text);								c++;				// increment to next column			}		}		r++;		c = 0;		// increment to next row, reset to first column	}	return(TRUE);}Boolean TextTable::WriteTableToFile(FILE *fp) {	char text[256];	unsigned long r,c;		LineBuffer *line = NewLineBuffer(4096); 	// assume that the table has been initialized to null values upon entry				r = c = 0;		for (r=0;r<numRows;r++) {				for (c=0;c<numColumns;c++) {									GetCell(r,c,text);				if (strlen(text) != 0) {										fprintf(fp,text);				}								if (c != numColumns - 1) {					fprintf(fp,"\t");									}				else {					fprintf(fp,"\n");				}								// increment to next column		}				// increment to next row, reset to first column		}	return(TRUE);}void TextTable::TransposeTable(void) {	unsigned long c,r,numTemp;	Handle temp;	for (c= 0;c<numColumns;c++) {			for (r = 0;r < numRows;r++) {									temp = cells[r][c];						cells[r][c] = cells[c][r];			cells[c][r] = temp;					}		}	numTemp = numColumns;	numColumns = numRows;	numRows = numTemp;}