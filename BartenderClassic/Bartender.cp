BibendumGet keystroke for idScan serial port for constant weightis this the first id scanned?if so, use the id to retrieve the appropriate expt for the dataassign weight to idobjects;class RatRecord:public Object {	short id;	char comment[256];	unsigned long start_time;	unsigned long end_time;};class ItemType:public Object {		char name[256];	// e.g. "Food"	char tag[256];	// e.g. "F"	Boolean CheckTag(char *string);		// given a string, check if our tag is part of the string		// item strings are of the structure ExptTag_RatNum_ItemTag		// return if true}class Weight:public Object {	ItemType *item;		double on;	double off;	Boolean got_on,got_off;	// TRUE if not weighed this day..	Weight(ItemType *i);	SetOn(double o);	SetOff(double o);	GetWeights(double *on, double *off, Boolean *got_on,Boolean *got_off);};class Experiment:public Object {	char name[256]; // eg. "Area Postrema Lesions"	char tag[256];	// "AP"	char comment[256];	unsigned long start_time;	unsigned long end_time;	Boolean waiting_for_off;	ListObject *rats; 	//	ListObject *items;	// list of ItemTypes  food, water, test	ListObject *days_of_data;	// list of the daily data objects	InitializeOn();	CleanUpOn();	InitializeOff();	CleanUpOff();	Boolean WaitingForOff(void);	DailyData *current_day;};DailyData *new_day = DailyData(SecsNow());class DailyData:public Object {	unsigned long on_time;	unsigned long off_time;	Boolean waiting_for_off;	ListObject *ratData; // list o RatWeightsRecords  make this the sublist	};class RatWeightsRecord:public Object {	// weights for each item for this rat on this day	RatRecord *rat;	ListObject *weights; // make this the sublist 				  // list of Weight objects	RatWeightsRecord(RatRecord *r,ListObject *items);}Experiment *MatchExperiment(char *string);RatRecord *MatchRat(char *string);ItemType *MatchItem(char *string);Weight *GetWeightRecord(Experiment *expt,RatRecord *rat,ItemType *item,unsigned long date);DailyData *Experiment::InitializeOn() {	Object *o;	// create an on day	DailyData *on_day = DailyData(SecsNow());	//add all the rats to the on_day	FORALL(o,rats) {		RatRecord *rat;		rat = (RatRecord *)o;		// each rat needs a weight record		RatWeightsRecord *record = new RatWeightsRecord(rat,items);		new_day->AddRatWeightsRecord(record);	}	// add this day to our list of days	days_of_data->AddMember(on_day);	current_day = on_day;		}Experiment::CleanUpOn(void) {	current_day = NULL;}Experiment::CleanUpOff(void) {	current_day = NULL;}Experiment::InitializeOff(void) {  DailyData *current_day = days_of_data->GetMember(days_of_data->GetNumMembers()-1);}Boolean Experiment::WaitingForOff(void) {	if (current_day->waiting_for_off) return(FALSE);	else return(TRUE);}DailyData::DailyData(unsigned long timeNow) {	on_time = timeNow;	wait_for_off = TRUE;	ratWeights = new ListObject();}void DailyData::AddRatWeightsRecord(RatWeightsRecord *record) {	ratWeights->AddMember(record);}void DailyData::SetWeight(RatRecord *rat,ItemType *item,double wgt, short on_or_off) {	Object *o,*p;	RatWeightsRecord *ratweights;	FORALL(o,ratWeights) {		ratweights = (RatWeightsRecord *)o;		if (rat == ratweights->rat) {			FORALL(p,ratweights->weights) {				weight = (Weight *)p;				if (item == weight->item ) {					if (on_or_off == ONWGTS) weight->SetOn(wgt);					else weight->SetOff(wgt);										return;				}			}		}}RatWeightsRecord::RatWeightsRecord(RatRecord *r,ListObject *items) {	rat = r;	weights = new ListObject();	FORALL(o,items) {		Weight *w = new Weight( (Item *)o);		weights->AddMember(w);	}}Weight::Weight( Item *i) {	item = i;	on = 0;	off = 0;	got_on = FALSE;	got_off = FALSE;}Weight::SetOn(double o) {on = o; got_on = TRUE;}Weight::SetOff(double o) {off = o; got_off = TRUE;}Weight::GetWeights(double *qon, double *qoff, Boolean *qgot_on,Boolean *qgot_off) {	*qon = on;	*qoff = off; 	*qgot_on = got_on;	*qgot_off = got_off;}void DoOnWeights() {	Experiment *expt;	DailyData *on_day;	char id[256];	Boolean first_id = TRUE;	double wgt;// Make sure the scale is zeroed.	ZeroWeight();// Get keystroke for id	GetInput(id);// is this the first id scanned?// if so, use the id to retrieve the appropriate expt for the dataif (first_id) {	expt = MatchExperiment(id);	if (CheckExpt(expt,ONWGTS)) {		first_id = FALSE;		expt->InitializeOn();	}}if (expt != NULL) {	// Scan serial port for constant weight	wgt = GetWeight();	//assign weight to id	expt->AssignWeight(id,wgt,ONWGTS);}void CheckExpt(Experiment *expt,short on_or_off,char *id) {	Boolean expecting_on;		if (expt == NULL) { PostUnknownExpt(id); }	else {		waiting_for_off = expt->WaitingForOff();		if ( !waiting_for_off && on_or_off == OFFWGTS) {						PostExpectingOn(id);			}		else if (waiting_for_off&& on_or_off == ONWGTS) {						PostExpectingOff(id);			}	}		}Experiment::AssignWeight(char *id,double wgt,short on_or_off) {	RatRecord *rat;	ItemType *item;	Experiment *expt;	Daily	MatchTags(id,&expt,&item,&rat);	if (expt != this) { PostWrongExpt(id,this); return;}	if (item == NULL) {PostNoSuchItem(id,this); return;}	if (rat == NULL) {PostNoSuchRat(id,this); return;}	current_day->SetWeight(rat,item,wgt,on_or_off);}Experiment::MatchTags(char *id,Experiment **expt,ItemType **item, RatRecord **rat) {	short i = 0;	short et = 0;	short it = 0;	short rt = 0;	char expt_tag[256],item_tag[256],rat_tag[256];	short rat_id;	// first parse the tags	while (!isnum(id[i])) {				expt_tag[et] = id[i];		et++;		i++;			}	expt_tag[et] = '\0';	while (isnum(id[i])) {				rat_tag[rt] = id[i];		rt++;		i++;			}	rat_tag[rt] = '\0'; sscanf(rat_tag,"%d",&rat_id);	while (id[i] != '\0') {				item_tag[it] = id[i];		it++;		i++;			}	item_tag[it] = '\0';	// now match the tags	(**expt) = MatchExperimentTag(expt_tag);	(**item) = GetItem(item_tag);	(**rat) = GetRat(rat_id);}ItemType *Experiment::GetItem(char *tag) {	ItemType *item = NULL;	FORALL(o,items) {		if (strcmp( ((ItemType *)o)->tag,tag) = 0) item = (ItemType *)o;	}	return(item);}RatRecord *Experiment::GetRat(short num) {	RatRecord *rat = NULL;	FORALL(o,rats) {		if ( ((RatRecord *)o)->id == id) rat = (RatRecord *)o;	}	return(rat);}