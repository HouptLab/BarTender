#include "BarObjects.hpp"#include "ReadBalance.hpp"void SetUpMenus(void);void ShowSplashScreen(void);void HideSplashScreen(void);void AboutCommand(void);void InstallBarOrders(void);void LoadExperiments(void);void InitOnWeights(void);void InitOffWeights(void);void OpenFolderFiles(long dirIDToSearch);enum {ID_MENU_File = ID_MENU_Apple + 1,Unused_ID_MENU_Edit, ID_MENU_Weights } ;	// this is a submenu...#define NUM_MENUS 9ListObject *allExpts;extern unsigned long numReadings;unsigned long oldNumReadings,numLoops ;extern double curr_weight;int main() {	OSErr err;	InitKernal();				// initialize the balance and start recording the current weight			err = OpenBalance();	oldNumReadings = -1;	numReadings = 0;	numLoops = 0;			//ReadBalance();	/*do {		ReadBalance();		if (numReadings != oldNumReadings) {			oldNumReadings = numReadings;		}		numLoops++;	} while ( curr_weight < 500.0 && numReadings < 10);			StopReadBalance();	*/			// add a menu bar	SetUpMenus();		// add a few commands	InstallBarOrders();			LoadExperiments();	InitOnWeights();	InitOffWeights();		RunKernal();		return(TRUE);}#define ABOUTDIAL 128DialogPtr aboutBox = NULL;void ShowSplashScreen(void) {	unsigned long now;	aboutBox = GetNewDialog(ABOUTDIAL,0L,(WindowPtr)-1L);	ShowWindow(aboutBox);	DrawDialog(aboutBox);		now  = SecsNow();		while (SecsNow() - now < 2) {}	}void HideSplashScreen(void) {	DisposDialog(aboutBox);}void AboutCommand(void) {		ShowSplashScreen();			while (Button()) {}	while (!Button()) {SystemTask();}	/*	SetPort(aboutBox);	copyright = GetPicture(129);	DrawPicture(copyright,&(aboutBox->portRect));		while (Button()) {}	while (!Button()) {SystemTask();}	*/		FlushEvents(everyEvent,0L);	HideSplashScreen();}MenuHandle Menus[NUM_MENUS];void SetUpMenus(void) {	 	short	i;	char text[255];	text[0] = 20;	text[1] = 0;	CtoPstr(text);		Menus[ID_MENU_Apple] = NewMenu( ID_MENU_Apple, (unsigned char *)text );		sprintf(text,"About Bartender... ");	CtoPstr(text);	AppendMenu(Menus[ID_MENU_Apple],(unsigned char *)text);		/*	sprintf(text,"(------------");	CtoPstr(text);			AppendMenu(Menus[ID_MENU_Apple],(unsigned char *)text);*/	AddResMenu( Menus[ID_MENU_Apple], 'DRVR' ); 	InsertMenu(Menus[ID_MENU_Apple],0);		for (i=ID_MENU_File;i<=ID_MENU_Weights;i++) {		Menus[i] = GetMenu(i);		InsertMenu(Menus[i], 0);	}		DrawMenuBar();					HiliteMenu(0);			  } /* setupmenus */  char fName[256];HFileInfo myCPB;WDPBRec wd; void LoadExperiments(void) {	 	WDPBRec myWDPB;	Object *o;	 	allExpts = new ListObject();				// get the directory id of the folder		SetVol(NULL,homeVol);	myWDPB.ioNamePtr = NULL;	PBHGetVol(&myWDPB,FALSE);		// TryFolderSearch(myWDPB.ioWDDirID);	OpenFolderFiles(myWDPB.ioWDDirID);}void OpenFolderFiles(long dirIDToSearch) {	short index = 1;	short r;	OSErr err;	short vRefNum;		r = FALSE;		do {			myCPB.ioVRefNum = 0;			myCPB.ioNamePtr = (unsigned char *)fName;			myCPB.ioFDirIndex = index;			myCPB.ioDirID = dirIDToSearch;			err = PBGetCatInfo((CInfoPBPtr)(&myCPB),FALSE);						if (err == noErr) {							if (((myCPB.ioFlAttrib >> 4) & 0x01) == 1) {									/* its a folder */					/* so recurse */					OpenFolderFiles(myCPB.ioDirID);									}				else {					/* its a file */					#define EXPT_TYPE 'EXPT'					if ( myCPB.ioFlFndrInfo.fdType == EXPT_TYPE   ) {							PtoCstr((unsigned char *)fName);							if (!strstr(fName,".bak")) {															/* update the bartender expt file */								wd.ioNamePtr = NULL;								wd.ioVRefNum = 0;								wd.ioWDProcID = 'BARt';								wd.ioWDDirID =dirIDToSearch;								err = PBOpenWD(&wd,FALSE);								vRefNum = wd.ioVRefNum;																Experiment *expt = new Experiment();								strcpy(expt->tag,fName);								expt->vRefNum = homeVol;								expt->Load();								allExpts->AddMember(expt);														}												}				}				index++;							}					} while (err == noErr);}